plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.github.node-gradle.node' version '2.2.4'
    id 'org.siouan.frontend' version '1.1.0'
}


frontend {
    nodeVersion = '10.15.3'
    // See 'scripts' section in your 'package.json file'
    cleanScript = 'run clean'
    assembleScript = 'run assemble'
    checkScript = 'run check'
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

//node {
//    // Version of node to use.
//    version = '16.10.0'
//
//    // Base URL for fetching node distributions (change if you have a mirror).
////    distBaseUrl = 'https://nodejs.org/dist'
//
//    // If true, it will download node using above parameters.
//    // If false, it will try to use globally installed node.
//    download = true
//
//    // Set the work directory for unpacking node
//    workDir = file("${project.projectDir}/src/main/frontend/nodejs")
//
//    // Set the work directory for NPM
//    npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")
//
//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
//}
//
//task npmInstallDependencies(type: NpmTask) {
//    dependsOn 'npmSetup'
//    execOverrides {
//        it.ignoreExitValue = true
//        it.workingDir = 'src/main/frontend'
//    }
//    args = ['install']
//}
//
//task npmBuild(type: NpmTask) {
//    dependsOn 'npmInstallDependencies'
//    execOverrides {
//        it.ignoreExitValue = true
//        it.workingDir = 'src/main/frontend'
//    }
//    args = ['run', 'build']
//}
//
//task copyFrontendToBuild(type: Copy) {
//    dependsOn 'npmBuild'
//    from "$projectDir/src/main/frontend/build/"
////    include "*"
//    into "$buildDir/resources/main/static"
//}
//
//processResources {
//    dependsOn 'copyFrontendToBuild'
//}

node {
    // Version of node to use.
    version = '16.10.0'

    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.projectDir}/src/main/frontend/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    dependsOn 'npmInstallDependencies'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy) {
    dependsOn 'npmBuild'
    from "$projectDir/src/main/frontend/build/"
//    include "*"
    into "$buildDir/resources/main/static"
}

processResources {
    dependsOn 'copyFrontendToBuild'
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation group: "com.duosecurity", name: "duo-universal-sdk", version: "1.1.3"
    implementation 'org.webjars:jquery:3.4.1'
    implementation 'org.webjars:bootstrap:4.3.1'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.heroku.sdk:heroku-maven-plugin:3.0.3'
    testImplementation(platform('org.junit:junit-bom:5.8.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    implementation 'org.apache.maven.plugins:maven-javadoc-plugin:3.3.1'
    }

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }


}

